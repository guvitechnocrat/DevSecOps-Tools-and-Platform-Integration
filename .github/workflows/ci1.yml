name: Pipeline1

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-secure:
    runs-on: ubuntu-latest
    env:
      VAULT_ADDR: http://localhost:8200
          steps:
      # Step 1: Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4
              # Step 2: Login to Vault and fetch secrets
      - name: Fetch secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          method: token
          token: ${{ secrets.VAULT_DEV_TOKEN }}
          secrets: |
            secret/data/ci#SONAR_TOKEN:SONAR_TOKEN
      # Step 3: Build project
      - name: Build with Maven
        run: mvn -B -DskipTests package
              # Step 4: SonarQube scan
      - name: Run Sonar Scanner (Docker)
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="http://host.docker.internal:9000" \
            -e SONAR_LOGIN="${{ env.SONAR_TOKEN }}" \
            -v "${{ github.workspace }}":/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ github.repository }} \
            -Dsonar.sources=.
        # Step 5: Build Docker image
      - name: Build Docker image
        run: docker build -t demo-app:${{ github.sha }} .

      # Step 6: Trivy scan for vulnerabilities
      - name: Trivy scan image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: demo-app:${{ github.sha }}
          format: 'json'
          exit-code: '1'   # Fail if vulnerabilities above threshold
        # Step 7: Install OPA CLI
      - name: Install OPA CLI
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      # Step 8: Run OPA policy checks
      - name: Run OPA policy check
        run: |
          # Collect Kubernetes manifests into input.json
          python - <<'PY'
          import yaml, json, glob
          manifests=[]
          for f in glob.glob("k8s/*.yaml"):
              with open(f) as fh:
                  for doc in yaml.safe_load_all(fh):
                      if doc:
                          manifests.append(doc)
          with open("input.json", "w") as out:
              json.dump({"manifests":manifests}, out)
          PY
          opa eval -i input.json -d policy.rego "data.ci.deny" --fail
        
